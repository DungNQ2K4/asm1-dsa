import java.util.LinkedList;
import java.util.Queue;
import java.util.Stack;

public class Main {
    public static void main(String[] args) {
        /* LinkedList */
        LinkedList<String> animals = new LinkedList<>();
        // Add Operation
        LinkedListADT.addElement(animals);
        LinkedListADT.addElementWithIndex(animals, 0,  "Tiger");
        LinkedListADT.getElementByIndex(animals, 2);
        LinkedListADT.setElementValueByIndex(animals, 1, "Dog");
        LinkedListADT.scanElementLinkedList(animals);
        /* Stack */
        Stack<Integer> numbers = new Stack<>();
        // 1 - Push stack
        StackADT.stackPush(numbers);
        // 2 - Pop stack
        StackADT.stackPop(numbers);
        // 3- Peek stack
        StackADT.stackPeek(numbers);
        // 4 - Search stack
        StackADT.stackSearch(numbers, 7);
        // 5 - Check empty stack
        StackADT.checkEmptyStack(numbers);
        /* Queue Implement LinkedList */
        Queue<String> fruits = new LinkedList<>();
        QueueLinkedListADT.queueAdd(fruits);
        Queue<Integer> number = new LinkedList<>();
        QueueLinkedListADT.queueOffer(number);
        QueueLinkedListADT.queuePeek(number);
        QueueLinkedListADT.queuePoll(number);
        QueueLinkedListADT.queueSearch(number, 1);
        QueueLinkedListADT.forQueue(number);
        /* 1 - Bubble Sort */
        int[] randomNumbers = {100, 3, 1, 20, 5, 4};
        BubbleSortALU.bubbleSort(randomNumbers, randomNumbers.length);
            BubbleSortALU.printResult(randomNumbers);
            /* 2 - Insertion Sort */
        int[] randomNumbers2 = {100, 3, 1, 20, 5, 4};
        InsertionSortALU.InsertionSort(randomNumbers2);
        InsertionSortALU.printResult(randomNumbers2);
        /* 3 - Selection Sort */
        int[] randomNumbers3 = {100, 3, 1, 20, 5, 4};
        SelectionSortALU.selectionSort(randomNumbers3);
        SelectionSortALU.printResult(randomNumbers3);
        /* 4 - Merge Sort */
        int[] randomNumbers4 = {100, 3, 1, 20, 5, 4};
        MergeSortALU.sort(randomNumbers4, 0, randomNumbers4.length - 1);
        MergeSortALU.printResult(randomNumbers4);
    }
}
